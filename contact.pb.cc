// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contact.proto

#include "contact.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace contact2 {
PROTOBUF_CONSTEXPR Address::Address(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.home_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.unit_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddressDefaultTypeInternal() {}
  union {
    Address _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddressDefaultTypeInternal _Address_default_instance_;
PROTOBUF_CONSTEXPR PeopleInfo_Phone::PeopleInfo_Phone(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PeopleInfo_PhoneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeopleInfo_PhoneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeopleInfo_PhoneDefaultTypeInternal() {}
  union {
    PeopleInfo_Phone _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeopleInfo_PhoneDefaultTypeInternal _PeopleInfo_Phone_default_instance_;
PROTOBUF_CONSTEXPR PeopleInfo_RemarkEntry_DoNotUse::PeopleInfo_RemarkEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PeopleInfo_RemarkEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeopleInfo_RemarkEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeopleInfo_RemarkEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PeopleInfo_RemarkEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeopleInfo_RemarkEntry_DoNotUseDefaultTypeInternal _PeopleInfo_RemarkEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PeopleInfo::PeopleInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.phone_numbers_)*/{}
  , /*decltype(_impl_.remark_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.age_)*/0
  , /*decltype(_impl_.other_contact_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PeopleInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeopleInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeopleInfoDefaultTypeInternal() {}
  union {
    PeopleInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeopleInfoDefaultTypeInternal _PeopleInfo_default_instance_;
PROTOBUF_CONSTEXPR Contact::Contact(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.contacts_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContactDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContactDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContactDefaultTypeInternal() {}
  union {
    Contact _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContactDefaultTypeInternal _Contact_default_instance_;
}  // namespace contact2
static ::_pb::Metadata file_level_metadata_contact_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_contact_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_contact_2eproto = nullptr;

const uint32_t TableStruct_contact_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::contact2::Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::contact2::Address, _impl_.home_addr_),
  PROTOBUF_FIELD_OFFSET(::contact2::Address, _impl_.unit_addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::contact2::PeopleInfo_Phone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::contact2::PeopleInfo_Phone, _impl_.number_),
  PROTOBUF_FIELD_OFFSET(::contact2::PeopleInfo_Phone, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::contact2::PeopleInfo_RemarkEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contact2::PeopleInfo_RemarkEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::contact2::PeopleInfo_RemarkEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::contact2::PeopleInfo_RemarkEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::contact2::PeopleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::contact2::PeopleInfo, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::contact2::PeopleInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::contact2::PeopleInfo, _impl_.age_),
  PROTOBUF_FIELD_OFFSET(::contact2::PeopleInfo, _impl_.phone_numbers_),
  PROTOBUF_FIELD_OFFSET(::contact2::PeopleInfo, _impl_.data_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::contact2::PeopleInfo, _impl_.remark_),
  PROTOBUF_FIELD_OFFSET(::contact2::PeopleInfo, _impl_.other_contact_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::contact2::Contact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::contact2::Contact, _impl_.contacts_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::contact2::Address)},
  { 8, -1, -1, sizeof(::contact2::PeopleInfo_Phone)},
  { 16, 24, -1, sizeof(::contact2::PeopleInfo_RemarkEntry_DoNotUse)},
  { 26, -1, -1, sizeof(::contact2::PeopleInfo)},
  { 40, -1, -1, sizeof(::contact2::Contact)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::contact2::_Address_default_instance_._instance,
  &::contact2::_PeopleInfo_Phone_default_instance_._instance,
  &::contact2::_PeopleInfo_RemarkEntry_DoNotUse_default_instance_._instance,
  &::contact2::_PeopleInfo_default_instance_._instance,
  &::contact2::_Contact_default_instance_._instance,
};

const char descriptor_table_protodef_contact_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rcontact.proto\022\010contact2\032\031google/protob"
  "uf/any.proto\"/\n\007Address\022\021\n\thome_addr\030\001 \001"
  "(\t\022\021\n\tunit_addr\030\002 \001(\t\"\367\002\n\nPeopleInfo\022\014\n\004"
  "name\030\001 \001(\t\022\013\n\003age\030\002 \001(\005\0221\n\rphone_numbers"
  "\030\003 \003(\0132\032.contact2.PeopleInfo.Phone\022\"\n\004da"
  "ta\030\004 \001(\0132\024.google.protobuf.Any\022\014\n\002qq\030\005 \001"
  "(\tH\000\022\014\n\002wc\030\006 \001(\tH\000\0220\n\006remark\030\007 \003(\0132 .con"
  "tact2.PeopleInfo.RemarkEntry\032i\n\005Phone\022\016\n"
  "\006number\030\001 \001(\t\0222\n\004type\030\002 \001(\0162$.contact2.P"
  "eopleInfo.Phone.PhoneType\"\034\n\tPhoneType\022\006"
  "\n\002MP\020\000\022\007\n\003TLP\020\001\032-\n\013RemarkEntry\022\013\n\003key\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\017\n\rother_contact\""
  "1\n\007Contact\022&\n\010contacts\030\001 \003(\0132\024.contact2."
  "PeopleInfob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_contact_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::_pbi::once_flag descriptor_table_contact_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_contact_2eproto = {
    false, false, 538, descriptor_table_protodef_contact_2eproto,
    "contact.proto",
    &descriptor_table_contact_2eproto_once, descriptor_table_contact_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_contact_2eproto::offsets,
    file_level_metadata_contact_2eproto, file_level_enum_descriptors_contact_2eproto,
    file_level_service_descriptors_contact_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_contact_2eproto_getter() {
  return &descriptor_table_contact_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_contact_2eproto(&descriptor_table_contact_2eproto);
namespace contact2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeopleInfo_Phone_PhoneType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_contact_2eproto);
  return file_level_enum_descriptors_contact_2eproto[0];
}
bool PeopleInfo_Phone_PhoneType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PeopleInfo_Phone_PhoneType PeopleInfo_Phone::MP;
constexpr PeopleInfo_Phone_PhoneType PeopleInfo_Phone::TLP;
constexpr PeopleInfo_Phone_PhoneType PeopleInfo_Phone::PhoneType_MIN;
constexpr PeopleInfo_Phone_PhoneType PeopleInfo_Phone::PhoneType_MAX;
constexpr int PeopleInfo_Phone::PhoneType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Address::_Internal {
 public:
};

Address::Address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:contact2.Address)
}
Address::Address(const Address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Address* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.home_addr_){}
    , decltype(_impl_.unit_addr_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.home_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.home_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_home_addr().empty()) {
    _this->_impl_.home_addr_.Set(from._internal_home_addr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.unit_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unit_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unit_addr().empty()) {
    _this->_impl_.unit_addr_.Set(from._internal_unit_addr(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:contact2.Address)
}

inline void Address::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.home_addr_){}
    , decltype(_impl_.unit_addr_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.home_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.home_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unit_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unit_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:contact2.Address)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Address::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.home_addr_.Destroy();
  _impl_.unit_addr_.Destroy();
}

void Address::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:contact2.Address)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.home_addr_.ClearToEmpty();
  _impl_.unit_addr_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Address::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string home_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_home_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "contact2.Address.home_addr"));
        } else
          goto handle_unusual;
        continue;
      // string unit_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_unit_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "contact2.Address.unit_addr"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Address::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contact2.Address)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string home_addr = 1;
  if (!this->_internal_home_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_home_addr().data(), static_cast<int>(this->_internal_home_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "contact2.Address.home_addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_home_addr(), target);
  }

  // string unit_addr = 2;
  if (!this->_internal_unit_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unit_addr().data(), static_cast<int>(this->_internal_unit_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "contact2.Address.unit_addr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_unit_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contact2.Address)
  return target;
}

size_t Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contact2.Address)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string home_addr = 1;
  if (!this->_internal_home_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_home_addr());
  }

  // string unit_addr = 2;
  if (!this->_internal_unit_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unit_addr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Address::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Address::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Address::GetClassData() const { return &_class_data_; }


void Address::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Address*>(&to_msg);
  auto& from = static_cast<const Address&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:contact2.Address)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_home_addr().empty()) {
    _this->_internal_set_home_addr(from._internal_home_addr());
  }
  if (!from._internal_unit_addr().empty()) {
    _this->_internal_set_unit_addr(from._internal_unit_addr());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contact2.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  return true;
}

void Address::InternalSwap(Address* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.home_addr_, lhs_arena,
      &other->_impl_.home_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unit_addr_, lhs_arena,
      &other->_impl_.unit_addr_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Address::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_contact_2eproto_getter, &descriptor_table_contact_2eproto_once,
      file_level_metadata_contact_2eproto[0]);
}

// ===================================================================

class PeopleInfo_Phone::_Internal {
 public:
};

PeopleInfo_Phone::PeopleInfo_Phone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:contact2.PeopleInfo.Phone)
}
PeopleInfo_Phone::PeopleInfo_Phone(const PeopleInfo_Phone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PeopleInfo_Phone* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.number_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_number().empty()) {
    _this->_impl_.number_.Set(from._internal_number(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:contact2.PeopleInfo.Phone)
}

inline void PeopleInfo_Phone::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.number_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PeopleInfo_Phone::~PeopleInfo_Phone() {
  // @@protoc_insertion_point(destructor:contact2.PeopleInfo.Phone)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeopleInfo_Phone::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.number_.Destroy();
}

void PeopleInfo_Phone::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PeopleInfo_Phone::Clear() {
// @@protoc_insertion_point(message_clear_start:contact2.PeopleInfo.Phone)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.number_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeopleInfo_Phone::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "contact2.PeopleInfo.Phone.number"));
        } else
          goto handle_unusual;
        continue;
      // .contact2.PeopleInfo.Phone.PhoneType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::contact2::PeopleInfo_Phone_PhoneType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeopleInfo_Phone::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contact2.PeopleInfo.Phone)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string number = 1;
  if (!this->_internal_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_number().data(), static_cast<int>(this->_internal_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "contact2.PeopleInfo.Phone.number");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_number(), target);
  }

  // .contact2.PeopleInfo.Phone.PhoneType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contact2.PeopleInfo.Phone)
  return target;
}

size_t PeopleInfo_Phone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contact2.PeopleInfo.Phone)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string number = 1;
  if (!this->_internal_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_number());
  }

  // .contact2.PeopleInfo.Phone.PhoneType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeopleInfo_Phone::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PeopleInfo_Phone::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeopleInfo_Phone::GetClassData() const { return &_class_data_; }


void PeopleInfo_Phone::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PeopleInfo_Phone*>(&to_msg);
  auto& from = static_cast<const PeopleInfo_Phone&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:contact2.PeopleInfo.Phone)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_number().empty()) {
    _this->_internal_set_number(from._internal_number());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PeopleInfo_Phone::CopyFrom(const PeopleInfo_Phone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contact2.PeopleInfo.Phone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeopleInfo_Phone::IsInitialized() const {
  return true;
}

void PeopleInfo_Phone::InternalSwap(PeopleInfo_Phone* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.number_, lhs_arena,
      &other->_impl_.number_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeopleInfo_Phone::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_contact_2eproto_getter, &descriptor_table_contact_2eproto_once,
      file_level_metadata_contact_2eproto[1]);
}

// ===================================================================

PeopleInfo_RemarkEntry_DoNotUse::PeopleInfo_RemarkEntry_DoNotUse() {}
PeopleInfo_RemarkEntry_DoNotUse::PeopleInfo_RemarkEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PeopleInfo_RemarkEntry_DoNotUse::MergeFrom(const PeopleInfo_RemarkEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PeopleInfo_RemarkEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_contact_2eproto_getter, &descriptor_table_contact_2eproto_once,
      file_level_metadata_contact_2eproto[2]);
}

// ===================================================================

class PeopleInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& data(const PeopleInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
PeopleInfo::_Internal::data(const PeopleInfo* msg) {
  return *msg->_impl_.data_;
}
void PeopleInfo::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
PeopleInfo::PeopleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PeopleInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:contact2.PeopleInfo)
}
PeopleInfo::PeopleInfo(const PeopleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PeopleInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.phone_numbers_){from._impl_.phone_numbers_}
    , /*decltype(_impl_.remark_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.age_){}
    , decltype(_impl_.other_contact_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.remark_.MergeFrom(from._impl_.remark_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.data_);
  }
  _this->_impl_.age_ = from._impl_.age_;
  clear_has_other_contact();
  switch (from.other_contact_case()) {
    case kQq: {
      _this->_internal_set_qq(from._internal_qq());
      break;
    }
    case kWc: {
      _this->_internal_set_wc(from._internal_wc());
      break;
    }
    case OTHER_CONTACT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:contact2.PeopleInfo)
}

inline void PeopleInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.phone_numbers_){arena}
    , /*decltype(_impl_.remark_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.age_){0}
    , decltype(_impl_.other_contact_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_other_contact();
}

PeopleInfo::~PeopleInfo() {
  // @@protoc_insertion_point(destructor:contact2.PeopleInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PeopleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.phone_numbers_.~RepeatedPtrField();
  _impl_.remark_.Destruct();
  _impl_.remark_.~MapField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.data_;
  if (has_other_contact()) {
    clear_other_contact();
  }
}

void PeopleInfo::ArenaDtor(void* object) {
  PeopleInfo* _this = reinterpret_cast< PeopleInfo* >(object);
  _this->_impl_.remark_.Destruct();
}
void PeopleInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PeopleInfo::clear_other_contact() {
// @@protoc_insertion_point(one_of_clear_start:contact2.PeopleInfo)
  switch (other_contact_case()) {
    case kQq: {
      _impl_.other_contact_.qq_.Destroy();
      break;
    }
    case kWc: {
      _impl_.other_contact_.wc_.Destroy();
      break;
    }
    case OTHER_CONTACT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OTHER_CONTACT_NOT_SET;
}


void PeopleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:contact2.PeopleInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.phone_numbers_.Clear();
  _impl_.remark_.Clear();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _impl_.age_ = 0;
  clear_other_contact();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeopleInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "contact2.PeopleInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 age = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .contact2.PeopleInfo.Phone phone_numbers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phone_numbers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string qq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_qq();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "contact2.PeopleInfo.qq"));
        } else
          goto handle_unusual;
        continue;
      // string wc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_wc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "contact2.PeopleInfo.wc"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> remark = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.remark_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeopleInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contact2.PeopleInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "contact2.PeopleInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 age = 2;
  if (this->_internal_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_age(), target);
  }

  // repeated .contact2.PeopleInfo.Phone phone_numbers = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_phone_numbers_size()); i < n; i++) {
    const auto& repfield = this->_internal_phone_numbers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Any data = 4;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // string qq = 5;
  if (_internal_has_qq()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_qq().data(), static_cast<int>(this->_internal_qq().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "contact2.PeopleInfo.qq");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_qq(), target);
  }

  // string wc = 6;
  if (_internal_has_wc()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wc().data(), static_cast<int>(this->_internal_wc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "contact2.PeopleInfo.wc");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_wc(), target);
  }

  // map<string, string> remark = 7;
  if (!this->_internal_remark().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = PeopleInfo_RemarkEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_remark();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "contact2.PeopleInfo.RemarkEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "contact2.PeopleInfo.RemarkEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contact2.PeopleInfo)
  return target;
}

size_t PeopleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contact2.PeopleInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .contact2.PeopleInfo.Phone phone_numbers = 3;
  total_size += 1UL * this->_internal_phone_numbers_size();
  for (const auto& msg : this->_impl_.phone_numbers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> remark = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_remark_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_remark().begin();
      it != this->_internal_remark().end(); ++it) {
    total_size += PeopleInfo_RemarkEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Any data = 4;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // int32 age = 2;
  if (this->_internal_age() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_age());
  }

  switch (other_contact_case()) {
    // string qq = 5;
    case kQq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_qq());
      break;
    }
    // string wc = 6;
    case kWc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_wc());
      break;
    }
    case OTHER_CONTACT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeopleInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PeopleInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeopleInfo::GetClassData() const { return &_class_data_; }


void PeopleInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PeopleInfo*>(&to_msg);
  auto& from = static_cast<const PeopleInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:contact2.PeopleInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.phone_numbers_.MergeFrom(from._impl_.phone_numbers_);
  _this->_impl_.remark_.MergeFrom(from._impl_.remark_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_data());
  }
  if (from._internal_age() != 0) {
    _this->_internal_set_age(from._internal_age());
  }
  switch (from.other_contact_case()) {
    case kQq: {
      _this->_internal_set_qq(from._internal_qq());
      break;
    }
    case kWc: {
      _this->_internal_set_wc(from._internal_wc());
      break;
    }
    case OTHER_CONTACT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PeopleInfo::CopyFrom(const PeopleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contact2.PeopleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeopleInfo::IsInitialized() const {
  return true;
}

void PeopleInfo::InternalSwap(PeopleInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.phone_numbers_.InternalSwap(&other->_impl_.phone_numbers_);
  _impl_.remark_.InternalSwap(&other->_impl_.remark_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeopleInfo, _impl_.age_)
      + sizeof(PeopleInfo::_impl_.age_)
      - PROTOBUF_FIELD_OFFSET(PeopleInfo, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
  swap(_impl_.other_contact_, other->_impl_.other_contact_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeopleInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_contact_2eproto_getter, &descriptor_table_contact_2eproto_once,
      file_level_metadata_contact_2eproto[3]);
}

// ===================================================================

class Contact::_Internal {
 public:
};

Contact::Contact(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:contact2.Contact)
}
Contact::Contact(const Contact& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Contact* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.contacts_){from._impl_.contacts_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:contact2.Contact)
}

inline void Contact::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.contacts_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Contact::~Contact() {
  // @@protoc_insertion_point(destructor:contact2.Contact)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Contact::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contacts_.~RepeatedPtrField();
}

void Contact::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Contact::Clear() {
// @@protoc_insertion_point(message_clear_start:contact2.Contact)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contacts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Contact::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .contact2.PeopleInfo contacts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contacts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Contact::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contact2.Contact)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .contact2.PeopleInfo contacts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contacts_size()); i < n; i++) {
    const auto& repfield = this->_internal_contacts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contact2.Contact)
  return target;
}

size_t Contact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contact2.Contact)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .contact2.PeopleInfo contacts = 1;
  total_size += 1UL * this->_internal_contacts_size();
  for (const auto& msg : this->_impl_.contacts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Contact::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Contact::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Contact::GetClassData() const { return &_class_data_; }


void Contact::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Contact*>(&to_msg);
  auto& from = static_cast<const Contact&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:contact2.Contact)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.contacts_.MergeFrom(from._impl_.contacts_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Contact::CopyFrom(const Contact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contact2.Contact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contact::IsInitialized() const {
  return true;
}

void Contact::InternalSwap(Contact* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.contacts_.InternalSwap(&other->_impl_.contacts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Contact::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_contact_2eproto_getter, &descriptor_table_contact_2eproto_once,
      file_level_metadata_contact_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace contact2
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::contact2::Address*
Arena::CreateMaybeMessage< ::contact2::Address >(Arena* arena) {
  return Arena::CreateMessageInternal< ::contact2::Address >(arena);
}
template<> PROTOBUF_NOINLINE ::contact2::PeopleInfo_Phone*
Arena::CreateMaybeMessage< ::contact2::PeopleInfo_Phone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::contact2::PeopleInfo_Phone >(arena);
}
template<> PROTOBUF_NOINLINE ::contact2::PeopleInfo_RemarkEntry_DoNotUse*
Arena::CreateMaybeMessage< ::contact2::PeopleInfo_RemarkEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::contact2::PeopleInfo_RemarkEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::contact2::PeopleInfo*
Arena::CreateMaybeMessage< ::contact2::PeopleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::contact2::PeopleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::contact2::Contact*
Arena::CreateMaybeMessage< ::contact2::Contact >(Arena* arena) {
  return Arena::CreateMessageInternal< ::contact2::Contact >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
